@startuml
title Diagnostic Class Diagram
package eros {
    class System
    together {
        class Diagnostic
        enum Diagnostic::DiagnosticType
        enum Diagnostic::Message
        struct Diagnostic::DiagnosticDefinition
    }
}
enum Diagnostic::DiagnosticType {
    UNKNOWN_TYPE 
    SOFTWARE
    COMMUNICATIONS
    SENSORS 
    ACTUATORS
    DATA_STORAGE
    REMOTE_CONTROL
    TARGETING
    POSE
    TIMING
    SYSTEM_RESOURCE
}
enum Diagnostic::Message {
    NOERROR
    NODATA
    UNKNOWN_ERROR
    INITIALIZING
    INITIALIZING_ERROR
    DROPPING_PACKETS
    MISSING_HEARTBEATS
    DEVICE_NOT_AVAILABLE
    TEMPERATURE_HIGH
    TEMPERATURE_LOW
    RESOURCE_LEAK
    HIGH_RESOURCE_USAGE
    DIAGNOSTIC_FAILED

}
struct Diagnostic::DiagnosticDefinition {
    string device_name
    string node_name
    System::MainSystem system
    System::SubSystem subsystem
    System::Component component
    Diagnostic::DiagnosticType type
    Diagnostic::Message message
    Level::Type level
    string description
    uint64_t update_count
}
Diagnostic +-- Diagnostic::Message
Diagnostic +-- Diagnostic::DiagnosticType
Diagnostic +-- Diagnostic::DiagnosticDefinition
System *- Diagnostic
class Diagnostic {

    +{static} string DiagnosticTypeString(Diagnostic::DiagnosticType v)
    +{static} string DiagnosticMessageString(Diagnostic::Message v)
    +{static} string pretty(string pre, std::vector<DiagnosticDefinition> diagnostics)
    +{static} string pretty(string pre,DiagnosticDefinition diag,bool print_end_line = true)
    
    +string pretty()
    +void initialize(string device_name,string node_name,System::MainSystem system,System::SubSystem subsystem,System::Component component)
    +void initialize(Diagnostic::DiagnosticDefinition diag)
    +bool enable_diagnostics(std::vector<Diagnostic::DiagnosticType> diagnostic_types)
    +DiagnosticDefinition get_root_diagnostic() 
    +std::vector<DiagnosticDefinition> get_diagnostics()
    +std::vector<DiagnosticDefinition> get_latest_diagnostics()
    +DiagnosticDefinition update_diagnostic(Diagnostic::DiagnosticType diagnostic_type,Level::Type level,Diagnostic::Message message,string description)
    +DiagnosticDefinition update_diagnostic(DiagnosticDefinition diag)
    +DiagnosticDefinition update_diagnostic(string device_name Diagnostic::DiagnosticType diagnostic_type,Level::Type level,Diagnostic::Message message,string description)
}
@enduml

   
    