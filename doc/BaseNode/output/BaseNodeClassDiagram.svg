<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1215px" preserveAspectRatio="none" style="width:2344px;height:1215px;background:#FFFFFF;" version="1.1" viewBox="0 0 2344 1215" width="2344px" zoomAndPan="magnify"><defs/><g><rect fill="none" height="26.2969" id="_title" style="stroke:none;stroke-width:1.0;" width="313" x="1008.5" y="5"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="303" x="1013.5" y="22.9951">Base Node and Process Class Diagram</text><!--MD5=[04e143e1b92f58df159b9d5ccef94150]
cluster eros--><g id="cluster_eros"><path d="M8.5,113.7569 L45.5,113.7569 A3.75,3.75 0 0 1 48,116.2569 L55,136.0538 L2334.5,136.0538 A2.5,2.5 0 0 1 2337,138.5538 L2337,1206.2569 A2.5,2.5 0 0 1 2334.5,1208.7569 L8.5,1208.7569 A2.5,2.5 0 0 1 6,1206.2569 L6,116.2569 A2.5,2.5 0 0 1 8.5,113.7569 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="55" y1="136.0538" y2="136.0538"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="36" x="10" y="128.752">eros</text></g><!--MD5=[c985dff760347b0f75109e7eaa49d1c5]
class BaseNodeProcess--><g id="elem_BaseNodeProcess"><rect codeLine="25" fill="#F1F1F1" height="813.9531" id="BaseNodeProcess" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1376" x="22" y="329.7569"/><ellipse cx="641.75" cy="345.7569" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M644.7188,351.3975 Q644.1406,351.6944 643.5,351.835 Q642.8594,351.9913 642.1563,351.9913 Q639.6563,351.9913 638.3281,350.3506 Q637.0156,348.6944 637.0156,345.5694 Q637.0156,342.4444 638.3281,340.7881 Q639.6563,339.1319 642.1563,339.1319 Q642.8594,339.1319 643.5,339.2881 Q644.1563,339.4444 644.7188,339.7413 L644.7188,342.46 Q644.0938,341.8819 643.5,341.6163 Q642.9063,341.335 642.2813,341.335 Q640.9375,341.335 640.25,342.4131 Q639.5625,343.4756 639.5625,345.5694 Q639.5625,347.6631 640.25,348.7413 Q640.9375,349.8038 642.2813,349.8038 Q642.9063,349.8038 643.5,349.5381 Q644.0938,349.2569 644.7188,348.6788 L644.7188,351.3975 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="128" x="662.25" y="350.6036">BaseNodeProcess</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="1397" y1="361.7569" y2="361.7569"/><polygon fill="none" points="33,370.4053,37,374.4053,33,378.4053,29,374.4053" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="42" y="378.752">Logger* logger</text><polygon fill="none" points="33,386.7022,37,390.7022,33,394.7022,29,390.7022" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="42" y="395.0489">string hostname</text><polygon fill="none" points="33,402.9991,37,406.9991,33,410.9991,29,406.9991" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="42" y="411.3457">string base_node_name</text><polygon fill="none" points="33,419.2959,37,423.2959,33,427.2959,29,423.2959" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="42" y="427.6426">Node::State node_state</text><polygon fill="none" points="33,435.5928,37,439.5928,33,443.5928,29,439.5928" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="199" x="42" y="443.9395">Diagnostic diagnostic_helper</text><polygon fill="none" points="33,451.8897,37,455.8897,33,459.8897,29,455.8897" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="42" y="460.2364">bool unittest_running</text><polygon fill="none" points="33,468.1866,37,472.1866,33,476.1866,29,472.1866" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="42" y="476.5332">eros::ready_to_arm ready_to_arm</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="1397" y1="483.835" y2="483.835"/><ellipse cx="33" cy="497.4834" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="353" x="42" y="500.8301">Diagnostic::DiagnosticDefinition finish_initialization()</text><ellipse cx="33" cy="513.7803" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="78" x="42" y="517.127">void reset()</text><ellipse cx="33" cy="530.0772" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="490" x="42" y="533.4239">Diagnostic::DiagnosticDefinition update(double t_dt, double t_ros_time)</text><ellipse cx="33" cy="546.3741" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="620" x="42" y="549.7207">std::vector&lt;Diagnostic::DiagnosticDefinition&gt; new_commandmsg(eros::command t_msg)</text><ellipse cx="33" cy="562.6709" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="499" x="42" y="566.0176">std::vector&lt;Diagnostic::DiagnosticDefinition&gt; check_programvariables()</text><ellipse cx="33" cy="578.9678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="98" x="42" y="582.3145">void cleanup()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="42" y="598.6114">Â </text><ellipse cx="33" cy="611.5616" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1350" x="42" y="614.9082">void initialize(string t_base_node_name,string t_node_name,string t_hostname,System::MainSystem t_system,System::SubSystem t_subsystem,System::Component t_component,Logger* _logger)</text><ellipse cx="33" cy="627.8584" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="586" x="42" y="631.2051">bool enable_diagnostics(std::vector&lt;Diagnostic::DiagnosticType&gt; diagnostic_types)</text><ellipse cx="33" cy="644.1553" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="616" x="42" y="647.502">Diagnostic::DiagnosticDefinition update_diagnostic(Diagnostic::DiagnosticDefinition diag)</text><ellipse cx="33" cy="660.4522" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1124" x="42" y="663.7989">Diagnostic::DiagnosticDefinition update_diagnostic(Diagnostic::DiagnosticType diagnostic_type,Level::Type level,Diagnostic::Message message,string description)</text><ellipse cx="33" cy="676.7491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="42" y="680.0957">Node::State get_nodestate()</text><ellipse cx="33" cy="693.0459" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="42" y="696.3926">double get_runtime()</text><ellipse cx="33" cy="709.3428" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="42" y="712.6895">eros::ready_to_arm get_ready_to_arm()</text><ellipse cx="33" cy="725.6397" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="42" y="728.9864">string get_hostname()</text><ellipse cx="33" cy="741.9366" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="371" x="42" y="745.2832">Diagnostic::DiagnosticDefinition get_root_diagnostic()</text><ellipse cx="33" cy="758.2334" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="42" y="761.5801">std::vector&lt;Diagnostic::DiagnosticDefinition&gt; get_diagnostics()</text><ellipse cx="33" cy="774.5303" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="488" x="42" y="777.877">std::vector&lt;Diagnostic::DiagnosticDefinition&gt; get_latest_diagnostics()</text><ellipse cx="33" cy="790.8272" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="42" y="794.1739">double get_system_time()</text><ellipse cx="33" cy="807.1241" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="42" y="810.4707">double get_run_time()</text><ellipse cx="33" cy="823.4209" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="42" y="826.7676">Logger* get_logger()</text><ellipse cx="33" cy="839.7178" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="761" x="42" y="843.0645">json read_configuration(string device_name,bool include_self = true,string file_path = "/config/DeviceList.json")</text><ellipse cx="33" cy="856.0147" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="42" y="859.3614">bool request_statechange(Node::State newstate)</text><ellipse cx="33" cy="872.3116" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="562" x="42" y="875.6582">Diagnostic::DiagnosticDefinition base_update(double t_dt, double t_system_time)</text><ellipse cx="33" cy="888.6084" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="42" y="891.9551">std::vector&lt;string&gt; get_files_indir(string dir)</text><ellipse cx="33" cy="904.9053" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="138" x="42" y="908.252">void base_cleanup()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="42" y="924.5489">Â </text><ellipse cx="33" cy="937.4991" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="270" x="42" y="940.8457">ros::Time convert_time(struct timeval t)</text><ellipse cx="33" cy="953.7959" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="226" x="42" y="957.1426">ros::Time convert_time(double t)</text><ellipse cx="33" cy="970.0928" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="503" x="42" y="973.4395">eros::command convert_fromptr(const eros::command::ConstPtr&amp; t_ptr)</text><ellipse cx="33" cy="986.3897" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="549" x="42" y="989.7364">eros::ready_to_arm convert_fromptr(const eros::ready_to_arm::ConstPtr&amp; t_ptr)</text><ellipse cx="33" cy="1002.6866" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="587" x="42" y="1006.0332">eros::command_state convert_fromptr(const eros::command_state::ConstPtr&amp; t_ptr)</text><ellipse cx="33" cy="1018.9834" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="507" x="42" y="1022.3301">eros::diagnostic convert_fromptr(const eros::diagnostic::ConstPtr&amp; t_ptr)</text><ellipse cx="33" cy="1035.2803" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="468" x="42" y="1038.627">eros::diagnostic convert(const Diagnostic::DiagnosticDefinition def)</text><ellipse cx="33" cy="1051.5772" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="475" x="42" y="1054.9239">Diagnostic::DiagnosticDefinition convert(const eros::diagnostic diag)</text><ellipse cx="33" cy="1067.8741" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="42" y="1071.2207">eros::armed_state convert(ArmDisarm::State v)</text><ellipse cx="33" cy="1084.1709" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="325" x="42" y="1087.5176">ArmDisarm::State convert(eros::armed_state v)</text><ellipse cx="33" cy="1100.4678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="218" x="42" y="1103.8145">string sanitize_path(string path)</text><ellipse cx="33" cy="1116.7647" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="297" x="42" y="1120.1114">FileHelper::FileInfo read_file(string file_path)</text><ellipse cx="33" cy="1133.0616" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="531" x="42" y="1136.4082">FileHelper::FileInfo write_file(string full_path, char* bytes, uint64_t byte_count)</text></g><!--MD5=[e65fce124287dcb93d674d408f416346]
class BaseNode--><g id="elem_BaseNode"><rect codeLine="77" fill="#F1F1F1" height="911.7344" id="BaseNode" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="888" x="1433" y="280.7569"/><ellipse cx="1836.75" cy="296.7569" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1839.7188,302.3975 Q1839.1406,302.6944 1838.5,302.835 Q1837.8594,302.9913 1837.1563,302.9913 Q1834.6563,302.9913 1833.3281,301.3506 Q1832.0156,299.6944 1832.0156,296.5694 Q1832.0156,293.4444 1833.3281,291.7881 Q1834.6563,290.1319 1837.1563,290.1319 Q1837.8594,290.1319 1838.5,290.2881 Q1839.1563,290.4444 1839.7188,290.7413 L1839.7188,293.46 Q1839.0938,292.8819 1838.5,292.6163 Q1837.9063,292.335 1837.2813,292.335 Q1835.9375,292.335 1835.25,293.4131 Q1834.5625,294.4756 1834.5625,296.5694 Q1834.5625,298.6631 1835.25,299.7413 Q1835.9375,300.8038 1837.2813,300.8038 Q1837.9063,300.8038 1838.5,300.5381 Q1839.0938,300.2569 1839.7188,299.6788 L1839.7188,302.3975 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1857.25" y="301.6036">BaseNode</text><line style="stroke:#181818;stroke-width:0.5;" x1="1434" x2="2320" y1="312.7569" y2="312.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="1434" x2="2320" y1="320.7569" y2="320.7569"/><ellipse cx="1444" cy="334.4053" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="74" x="1453" y="337.752">bool start()</text><ellipse cx="1444" cy="350.7022" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="113" x="1453" y="354.0489">bool run_loop1()</text><ellipse cx="1444" cy="366.9991" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="113" x="1453" y="370.3457">bool run_loop2()</text><ellipse cx="1444" cy="383.2959" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="113" x="1453" y="386.6426">bool run_loop3()</text><ellipse cx="1444" cy="399.5928" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="117" x="1453" y="402.9395">bool run_001hz()</text><ellipse cx="1444" cy="415.8897" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="108" x="1453" y="419.2364">bool run_01hz()</text><ellipse cx="1444" cy="432.1866" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="151" x="1453" y="435.5332">bool run_01hz_noisy()</text><ellipse cx="1444" cy="448.4834" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="99" x="1453" y="451.8301">bool run_1hz()</text><ellipse cx="1444" cy="464.7803" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="108" x="1453" y="468.127">bool run_10hz()</text><ellipse cx="1444" cy="481.0772" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="125" x="1453" y="484.4239">void thread_loop()</text><ellipse cx="1444" cy="497.3741" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="523" x="1453" y="500.7207">bool changenodestate_service(eros::srv_change_nodestate::Request &amp;req,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="1453" y="517.0176">eros::srv_change_nodestate::Response &amp;res)</text><ellipse cx="1444" cy="529.9678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="451" x="1453" y="533.3145">void command_Callback(const eros::command::ConstPtr &amp;t_msg)</text><ellipse cx="1444" cy="546.2647" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="98" x="1453" y="549.6114">void cleanup()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="1453" y="565.9082">Â </text><ellipse cx="1444" cy="578.8584" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="1453" y="582.2051">void set_no_launch_enabled(bool v)</text><ellipse cx="1444" cy="595.1553" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="1453" y="598.502">void disable_armedstate_sub()</text><ellipse cx="1444" cy="611.4522" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="1453" y="614.7989">void disable_modestate_sub()</text><ellipse cx="1444" cy="627.7491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="1453" y="631.0957">void enable_ready_to_arm_pub(bool v)</text><ellipse cx="1444" cy="644.0459" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="1453" y="647.3926">void set_basenodename(string t_base_node_name)</text><ellipse cx="1444" cy="660.3428" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="862" x="1453" y="663.6895">void initialize_diagnostic(System::MainSystem t_system,System::SubSystem t_subsystem,System::Component t_component)</text><ellipse cx="1444" cy="676.6397" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="806" x="1453" y="679.9864">void initialize_firmware(uint16_t t_major_version,uint16_t t_minor_version,uint16_t t_build_number,string t_description)</text><ellipse cx="1444" cy="692.9366" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="1453" y="696.2832">void set_nodename(string t_node_name)</text><ellipse cx="1444" cy="709.2334" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="389" x="1453" y="712.5801">Diagnostic::DiagnosticDefinition preinitialize_basenode()</text><ellipse cx="1444" cy="725.5303" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="235" x="1453" y="728.877">void set_loop1_rate(double t_rate)</text><ellipse cx="1444" cy="741.8272" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="235" x="1453" y="745.1739">void set_loop2_rate(double t_rate)</text><ellipse cx="1444" cy="758.1241" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="235" x="1453" y="761.4707">void set_loop3_rate(double t_rate)</text><ellipse cx="1444" cy="774.4209" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="1453" y="777.7676">void set_ros_rate(double t_rate)</text><ellipse cx="1444" cy="790.7178" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="258" x="1453" y="794.0645">bool update(Node::State node_state)</text><ellipse cx="1444" cy="807.0147" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="192" x="1453" y="810.3614">string get_basenodename()</text><ellipse cx="1444" cy="823.3116" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="1453" y="826.6582">string get_nodename()</text><ellipse cx="1444" cy="839.6084" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="1453" y="842.9551">string read_robotnamespace()</text><ellipse cx="1444" cy="855.9053" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="1453" y="859.252">void set_robotnamespace(string _robot_namespace)</text><ellipse cx="1444" cy="872.2022" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="1453" y="875.5489">string get_robotnamespace()</text><ellipse cx="1444" cy="888.4991" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="1453" y="891.8457">string get_verbositylevel()</text><ellipse cx="1444" cy="904.7959" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="392" x="1453" y="908.1426">boost::shared_ptr&lt;ros::NodeHandle&gt; get_nodehandle()</text><ellipse cx="1444" cy="921.0928" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="1453" y="924.4395">Logger *get_logger()</text><ellipse cx="1444" cy="937.3897" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="334" x="1453" y="940.7364">void update_ready_to_arm(eros::ready_to_arm v)</text><ellipse cx="1444" cy="953.6866" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="460" x="1453" y="957.0332">double measure_time_diff(ros::Time t_timer_a, ros::Time t_timer_b)</text><ellipse cx="1444" cy="969.9834" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="448" x="1453" y="973.3301">eros::resource convert(ResourceMonitor::ResourceInfo res_info)</text><ellipse cx="1444" cy="986.2803" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="413" x="1453" y="989.627">void new_ppsmsg(const std_msgs::Bool::ConstPtr &amp;t_msg)</text><ellipse cx="1444" cy="1002.5772" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="645" x="1453" y="1005.9239">bool firmware_service(eros::srv_firmware::Request &amp;req, eros::srv_firmware::Response &amp;res)</text><ellipse cx="1444" cy="1018.8741" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="432" x="1453" y="1022.2207">bool loggerlevel_service(eros::srv_logger_level::Request &amp;req,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="1453" y="1038.5176">eros::srv_logger_level::Response &amp;res)</text><ellipse cx="1444" cy="1051.4678" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="1453" y="1054.8145">bool diagnostics_service(eros::srv_get_diagnostics::Request &amp;req,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="1453" y="1071.1114">eros::srv_get_diagnostics::Response &amp;res)</text><ellipse cx="1444" cy="1084.0616" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="483" x="1453" y="1087.4082">void armedstate_Callback(const eros::armed_state::ConstPtr &amp;t_msg)</text><ellipse cx="1444" cy="1100.3584" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="475" x="1453" y="1103.7051">void modestate_Callback(const eros::mode_state::ConstPtr &amp;t_msg)</text><ellipse cx="1444" cy="1116.6553" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="1453" y="1120.002">void base_reset()</text><ellipse cx="1444" cy="1132.9522" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="291" x="1453" y="1136.2989">string validate_robotnamespace(string str)</text><ellipse cx="1444" cy="1149.2491" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="153" x="1453" y="1152.5957">string get_hostname()</text><ellipse cx="1444" cy="1165.5459" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="537" x="1453" y="1168.8926">eros::armed_state convert_fromptr(const eros::armed_state::ConstPtr &amp;t_ptr)</text><ellipse cx="1444" cy="1181.8428" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="529" x="1453" y="1185.1895">eros::mode_state convert_fromptr(const eros::mode_state::ConstPtr &amp;t_ptr)</text></g><!--MD5=[dd6040892b55b688f055f9200384bf77]
class Level::Type--><g id="elem_Level::Type"><rect codeLine="6" fill="#F1F1F1" height="48" id="Level::Type" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="111" x="973.5" y="172.7569"/><ellipse cx="988.5" cy="188.7569" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M992.6094,194.7569 L984.8906,194.7569 L984.8906,182.3663 L992.6094,182.3663 L992.6094,184.5225 L987.3438,184.5225 L987.3438,187.1944 L992.1094,187.1944 L992.1094,189.3506 L987.3438,189.3506 L987.3438,192.6006 L992.6094,192.6006 L992.6094,194.7569 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="1002.5" y="193.6036">Level::Type</text><line style="stroke:#181818;stroke-width:0.5;" x1="974.5" x2="1083.5" y1="204.7569" y2="204.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="974.5" x2="1083.5" y1="212.7569" y2="212.7569"/></g><!--MD5=[e5916490e9e6a84b67f3f18d2db3c230]
class Diagnostic::DiagnosticDefinition--><g id="elem_Diagnostic::DiagnosticDefinition"><rect codeLine="7" fill="#F1F1F1" height="48" id="Diagnostic::DiagnosticDefinition" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="253" x="154.5" y="172.7569"/><ellipse cx="169.5" cy="188.7569" fill="#F1F1F1" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M168.9844,189.3194 Q167.125,188.6163 166.4688,187.8506 Q165.8281,187.0694 165.8281,185.7569 Q165.8281,184.0694 166.9063,183.1006 Q167.9844,182.1319 169.8594,182.1319 Q170.7188,182.1319 171.5625,182.335 Q172.4219,182.5225 173.2656,182.9131 L173.2656,185.3038 Q172.4844,184.7413 171.6563,184.46 Q170.8438,184.1631 170.0469,184.1631 Q169.1719,184.1631 168.6875,184.5225 Q168.2188,184.8819 168.2188,185.5381 Q168.2188,186.0538 168.5625,186.3975 Q168.9063,186.7256 170,187.1319 L171.0625,187.5381 Q172.5469,188.085 173.25,188.9913 Q173.9688,189.8975 173.9688,191.2725 Q173.9688,193.1475 172.8594,194.0694 Q171.75,194.9913 169.5,194.9913 Q168.5781,194.9913 167.6563,194.7725 Q166.7344,194.5538 165.875,194.1319 L165.875,191.6006 Q166.8438,192.2881 167.7656,192.6319 Q168.6875,192.9756 169.5781,192.9756 Q170.4844,192.9756 170.9844,192.5694 Q171.4844,192.1475 171.4844,191.4131 Q171.4844,190.8506 171.1406,190.4444 Q170.8125,190.0225 170.1875,189.7725 L168.9844,189.3194 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="183.5" y="193.6036">Diagnostic::DiagnosticDefinition</text><line style="stroke:#181818;stroke-width:0.5;" x1="155.5" x2="406.5" y1="204.7569" y2="204.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="155.5" x2="406.5" y1="212.7569" y2="212.7569"/></g><!--MD5=[f856073796c7398bbe7ff0e81f126c67]
class Node::State--><g id="elem_Node::State"><rect codeLine="8" fill="#F1F1F1" height="48" id="Node::State" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="115" x="823.5" y="172.7569"/><ellipse cx="838.5" cy="188.7569" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M842.6094,194.7569 L834.8906,194.7569 L834.8906,182.3663 L842.6094,182.3663 L842.6094,184.5225 L837.3438,184.5225 L837.3438,187.1944 L842.1094,187.1944 L842.1094,189.3506 L837.3438,189.3506 L837.3438,192.6006 L842.6094,192.6006 L842.6094,194.7569 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="852.5" y="193.6036">Node::State</text><line style="stroke:#181818;stroke-width:0.5;" x1="824.5" x2="937.5" y1="204.7569" y2="204.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="824.5" x2="937.5" y1="212.7569" y2="212.7569"/></g><!--MD5=[248f897e4bb16c2722904b15df30346f]
class Logger--><g id="elem_Logger"><rect codeLine="9" fill="#F1F1F1" height="48" id="Logger" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="80" x="1260" y="172.7569"/><ellipse cx="1275" cy="188.7569" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1277.9688,194.3975 Q1277.3906,194.6944 1276.75,194.835 Q1276.1094,194.9913 1275.4063,194.9913 Q1272.9063,194.9913 1271.5781,193.3506 Q1270.2656,191.6944 1270.2656,188.5694 Q1270.2656,185.4444 1271.5781,183.7881 Q1272.9063,182.1319 1275.4063,182.1319 Q1276.1094,182.1319 1276.75,182.2881 Q1277.4063,182.4444 1277.9688,182.7413 L1277.9688,185.46 Q1277.3438,184.8819 1276.75,184.6163 Q1276.1563,184.335 1275.5313,184.335 Q1274.1875,184.335 1273.5,185.4131 Q1272.8125,186.4756 1272.8125,188.5694 Q1272.8125,190.6631 1273.5,191.7413 Q1274.1875,192.8038 1275.5313,192.8038 Q1276.1563,192.8038 1276.75,192.5381 Q1277.3438,192.2569 1277.9688,191.6788 L1277.9688,194.3975 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="1289" y="193.6036">Logger</text><line style="stroke:#181818;stroke-width:0.5;" x1="1261" x2="1339" y1="204.7569" y2="204.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="1261" x2="1339" y1="212.7569" y2="212.7569"/></g><!--MD5=[82a1a2178257ecd0d0bca75270f3e3a5]
class ArmDisarm::State--><g id="elem_ArmDisarm::State"><rect codeLine="10" fill="#F1F1F1" height="48" id="ArmDisarm::State" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="153" x="442.5" y="172.7569"/><ellipse cx="457.5" cy="188.7569" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M461.6094,194.7569 L453.8906,194.7569 L453.8906,182.3663 L461.6094,182.3663 L461.6094,184.5225 L456.3438,184.5225 L456.3438,187.1944 L461.1094,187.1944 L461.1094,189.3506 L456.3438,189.3506 L456.3438,192.6006 L461.6094,192.6006 L461.6094,194.7569 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="471.5" y="193.6036">ArmDisarm::State</text><line style="stroke:#181818;stroke-width:0.5;" x1="443.5" x2="594.5" y1="204.7569" y2="204.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="443.5" x2="594.5" y1="212.7569" y2="212.7569"/></g><!--MD5=[4219d00db283f52fb3d65436ee14c0fc]
class FileHelper::FileInfo--><g id="elem_FileHelper::FileInfo"><rect codeLine="11" fill="#F1F1F1" height="48" id="FileHelper::FileInfo" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="158" x="631" y="172.7569"/><ellipse cx="646" cy="188.7569" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M650.1094,194.7569 L642.3906,194.7569 L642.3906,182.3663 L650.1094,182.3663 L650.1094,184.5225 L644.8438,184.5225 L644.8438,187.1944 L649.6094,187.1944 L649.6094,189.3506 L644.8438,189.3506 L644.8438,192.6006 L650.1094,192.6006 L650.1094,194.7569 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="660" y="193.6036">FileHelper::FileInfo</text><line style="stroke:#181818;stroke-width:0.5;" x1="632" x2="788" y1="204.7569" y2="204.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="632" x2="788" y1="212.7569" y2="212.7569"/></g><!--MD5=[36fa9c4bc26a4196447d5dae16ba58f1]
class Diagnostic--><g id="elem_Diagnostic"><rect codeLine="12" fill="#F1F1F1" height="48" id="Diagnostic" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="105" x="1119.5" y="172.7569"/><ellipse cx="1134.5" cy="188.7569" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1137.4688,194.3975 Q1136.8906,194.6944 1136.25,194.835 Q1135.6094,194.9913 1134.9063,194.9913 Q1132.4063,194.9913 1131.0781,193.3506 Q1129.7656,191.6944 1129.7656,188.5694 Q1129.7656,185.4444 1131.0781,183.7881 Q1132.4063,182.1319 1134.9063,182.1319 Q1135.6094,182.1319 1136.25,182.2881 Q1136.9063,182.4444 1137.4688,182.7413 L1137.4688,185.46 Q1136.8438,184.8819 1136.25,184.6163 Q1135.6563,184.335 1135.0313,184.335 Q1133.6875,184.335 1133,185.4131 Q1132.3125,186.4756 1132.3125,188.5694 Q1132.3125,190.6631 1133,191.7413 Q1133.6875,192.8038 1135.0313,192.8038 Q1135.6563,192.8038 1136.25,192.5381 Q1136.8438,192.2569 1137.4688,191.6788 L1137.4688,194.3975 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="1148.5" y="193.6036">Diagnostic</text><line style="stroke:#181818;stroke-width:0.5;" x1="1120.5" x2="1223.5" y1="204.7569" y2="204.7569"/><line style="stroke:#181818;stroke-width:0.5;" x1="1120.5" x2="1223.5" y1="212.7569" y2="212.7569"/></g><!--MD5=[fafd90a4b0eb0c3d8aaf3e20e0749f00]
reverse link Logger to BaseNodeProcess--><g id="link_Logger_BaseNodeProcess"><path codeLine="15" d="M1270.95,224.2469 C1245.08,247.8369 1203.88,285.4069 1155.24,329.7569 " fill="none" id="Logger-backto-BaseNodeProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1274.65,220.8769,1265.3034,223.9819,1270.9542,224.2445,1270.6916,229.8953,1274.65,220.8769" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[16fd42bfe828f3acc9b74cd40feba27a]
reverse link Level::Type to BaseNodeProcess--><g id="link_Level::Type_BaseNodeProcess"><path codeLine="16" d="M1008.54,232.2569 C994.51,255.9169 974.23,290.1269 950.73,329.7569 " fill="none" id="Level::Type-backto-BaseNodeProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1015.29,220.8769,1008.79,223.9994,1009.1724,231.2004,1015.6724,228.0778,1015.29,220.8769" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[cdf990444701d26aa563a467ce03c0e2]
reverse link Diagnostic::DiagnosticDefinition to BaseNodeProcess--><g id="link_Diagnostic::DiagnosticDefinition_BaseNodeProcess"><path codeLine="17" d="M307.74,231.2869 C326.63,254.9769 354.22,289.5869 386.25,329.7569 " fill="none" id="Diagnostic::DiagnosticDefinition-backto-BaseNodeProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="299.43,220.8769,300.0448,228.0617,306.9135,230.2576,306.2986,223.0727,299.43,220.8769" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f4a3fe2cdbf2d9e459be18d841218c69]
reverse link Node::State to BaseNodeProcess--><g id="link_Node::State_BaseNodeProcess"><path codeLine="18" d="M869.62,233.5669 C862.11,257.1769 851.41,290.8569 839.05,329.7569 " fill="none" id="Node::State-backto-BaseNodeProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="873.65,220.8769,868.0232,225.3867,870.0219,232.3153,875.6488,227.8054,873.65,220.8769" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c7c62fd3be14be70edafd8b230b876a9]
reverse link ArmDisarm::State to BaseNodeProcess--><g id="link_ArmDisarm::State_BaseNodeProcess"><path codeLine="19" d="M531.6,233.2369 C539.98,256.8569 551.99,290.6769 565.86,329.7569 " fill="none" id="ArmDisarm::State-backto-BaseNodeProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="527.21,220.8769,525.446,227.8689,531.2218,232.1864,532.9857,225.1944,527.21,220.8769" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[888402ec6b018e44a722e9cf138d82e2]
reverse link FileHelper::FileInfo to BaseNodeProcess--><g id="link_FileHelper::FileInfo_BaseNodeProcess"><path codeLine="20" d="M710,233.9069 C710,257.4869 710,291.0369 710,329.7569 " fill="none" id="FileHelper::FileInfo-backto-BaseNodeProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="710,220.8769,706,226.8769,710,232.8769,714,226.8769,710,220.8769" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e98d9ecb15d036b8128795001a70597c]
reverse link Diagnostic to BaseNodeProcess--><g id="link_Diagnostic_BaseNodeProcess"><path codeLine="21" d="M1143.48,230.9669 C1123.13,254.6669 1093.3,289.4069 1058.65,329.7569 " fill="none" id="Diagnostic-backto-BaseNodeProcess" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1152.15,220.8769,1145.2073,222.8259,1144.3362,229.9842,1151.2789,228.0352,1152.15,220.8769" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[21251ec311c97d3f01d5704280bc6a7c]
reverse link Diagnostic to BaseNode--><g id="link_Diagnostic_BaseNode"><path codeLine="22" d="M1212.22,228.1569 C1221.91,234.3969 1232.51,240.3869 1243,244.7569 C1315.49,274.9769 1346.78,243.6569 1416,280.7569 C1421.58,283.7469 1427.13,286.8169 1432.66,289.9769 " fill="none" id="Diagnostic-backto-BaseNode" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1201.32,220.8069,1204.0549,227.4792,1211.2659,227.521,1208.531,220.8486,1201.32,220.8069" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[42366fffd4852c440755fd0551f75bf9]
reverse link Logger to BaseNode--><g id="link_Logger_BaseNode"><path codeLine="23" d="M1346.29,228.3769 C1368.05,243.3969 1393.98,262.2169 1416,280.7569 C1421.59,285.4669 1427.19,290.2269 1432.81,295.0369 " fill="none" id="Logger-backto-BaseNode" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1335.33,220.8969,1338.0282,227.5841,1345.2389,227.6655,1342.5406,220.9782,1335.33,220.8969" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e6bba0c6f9a634d1774ea1e20463ada1]
reverse link Diagnostic to Diagnostic::DiagnosticDefinition--><g id="link_Diagnostic_Diagnostic::DiagnosticDefinition"><path codeLine="24" d="M1156.29,158.8869 C1142.16,130.2769 1118.37,93.0569 1084.5,75.7569 C1020.98,43.2969 510.18,53.2169 442.5,75.7569 C385.16,94.8569 331.77,143.1569 303.04,172.6269 " fill="none" id="Diagnostic-backto-Diagnostic::DiagnosticDefinition" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="1159.2548" cy="165.2737" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1155.8797" x2="1162.63" y1="158.0206" y2="172.5269"/><line style="stroke:#181818;stroke-width:1.0;" x1="1166.508" x2="1152.0017" y1="161.8986" y2="168.6489"/></g><!--MD5=[da9a44cdc12a328612f04934a7a3328a]
@startuml
title Base Node and Process Class Diagram
package eros {
    class BaseNodeProcess
    class BaseNode
    together {
        enum Level::Type
        struct Diagnostic::DiagnosticDefinition
        enum Node::State
        class Logger
        enum ArmDisarm::State
        enum FileHelper::FileInfo
        class Diagnostic
    }
}
Logger <- - BaseNodeProcess
Level::Type *- - BaseNodeProcess
Diagnostic::DiagnosticDefinition *- - BaseNodeProcess
Node::State *- - BaseNodeProcess
ArmDisarm::State *- - BaseNodeProcess
FileHelper::FileInfo *- - BaseNodeProcess
Diagnostic *- - BaseNodeProcess
Diagnostic *- - BaseNode
Logger *- - BaseNode
Diagnostic +- Diagnostic::DiagnosticDefinition
class BaseNodeProcess {
    +{abstract} Diagnostic::DiagnosticDefinition finish_initialization()
    +{abstract} void reset()
    +{abstract} Diagnostic::DiagnosticDefinition update(double t_dt, double t_ros_time)
    +{abstract} std::vector<Diagnostic::DiagnosticDefinition> new_commandmsg(eros::command t_msg)
    +{abstract} std::vector<Diagnostic::DiagnosticDefinition> check_programvariables() 
    +{abstract} void cleanup()

    +void initialize(string t_base_node_name,string t_node_name,string t_hostname,System::MainSystem t_system,System::SubSystem t_subsystem,System::Component t_component,Logger* _logger)
    +bool enable_diagnostics(std::vector<Diagnostic::DiagnosticType> diagnostic_types)
    +Diagnostic::DiagnosticDefinition update_diagnostic(Diagnostic::DiagnosticDefinition diag)
    +Diagnostic::DiagnosticDefinition update_diagnostic(Diagnostic::DiagnosticType diagnostic_type,Level::Type level,Diagnostic::Message message,string description)
    +Node::State get_nodestate()
    +double get_runtime()
    +eros::ready_to_arm get_ready_to_arm()
    +string get_hostname()
    +Diagnostic::DiagnosticDefinition get_root_diagnostic()
    +std::vector<Diagnostic::DiagnosticDefinition> get_diagnostics()
    +std::vector<Diagnostic::DiagnosticDefinition> get_latest_diagnostics()
    +double get_system_time() 
    +double get_run_time()
    +Logger* get_logger()
    +json read_configuration(string device_name,bool include_self = true,string file_path = "~/config/DeviceList.json")
    +bool request_statechange(Node::State newstate)
    +Diagnostic::DiagnosticDefinition base_update(double t_dt, double t_system_time)
    +std::vector<string> get_files_indir(string dir)
    +void base_cleanup()

    +{static} ros::Time convert_time(struct timeval t)
    +{static} ros::Time convert_time(double t)
    +{static} eros::command convert_fromptr(const eros::command::ConstPtr& t_ptr)
    +{static} eros::ready_to_arm convert_fromptr(const eros::ready_to_arm::ConstPtr& t_ptr)
    +{static} eros::command_state convert_fromptr(const eros::command_state::ConstPtr& t_ptr)
    +{static} eros::diagnostic convert_fromptr(const eros::diagnostic::ConstPtr& t_ptr)
    +{static} eros::diagnostic convert(const Diagnostic::DiagnosticDefinition def)
    +{static} Diagnostic::DiagnosticDefinition convert(const eros::diagnostic diag)
    +{static} eros::armed_state convert(ArmDisarm::State v)
    +{static} ArmDisarm::State convert(eros::armed_state v)
    +{static} string sanitize_path(string path)
    +{static} FileHelper::FileInfo read_file(string file_path)
    +{static} FileHelper::FileInfo write_file(string full_path, char* bytes, uint64_t byte_count)

    #Logger* logger
    #string hostname
    #string base_node_name
    #Node::State node_state
    #Diagnostic diagnostic_helper
    #bool unittest_running
    #eros::ready_to_arm ready_to_arm


}
class BaseNode {
    +{abstract} bool start()
    +{abstract} bool run_loop1()
    +{abstract} bool run_loop2()
    +{abstract} bool run_loop3()
    +{abstract} bool run_001hz()
    +{abstract} bool run_01hz()
    +{abstract} bool run_01hz_noisy()
    +{abstract} bool run_1hz()
    +{abstract} bool run_10hz()
    +{abstract} void thread_loop()
    +{abstract} bool changenodestate_service(eros::srv_change_nodestate::Request &req,
                                         eros::srv_change_nodestate::Response &res)
    +{abstract} void command_Callback(const eros::command::ConstPtr &t_msg)
    +{abstract} void cleanup()

    +void set_no_launch_enabled(bool v)
    +void disable_armedstate_sub()
    +void disable_modestate_sub()
    +void enable_ready_to_arm_pub(bool v)
    +void set_basenodename(string t_base_node_name)
    +void initialize_diagnostic(System::MainSystem t_system,System::SubSystem t_subsystem,System::Component t_component)
    +void initialize_firmware(uint16_t t_major_version,uint16_t t_minor_version,uint16_t t_build_number,string t_description)
    +void set_nodename(string t_node_name)
    +Diagnostic::DiagnosticDefinition preinitialize_basenode()
    +void set_loop1_rate(double t_rate)
    +void set_loop2_rate(double t_rate)
    +void set_loop3_rate(double t_rate)
    +void set_ros_rate(double t_rate)
    +bool update(Node::State node_state)
    +string get_basenodename()
    +string get_nodename()
    +string read_robotnamespace()
    +void set_robotnamespace(string _robot_namespace)
    +string get_robotnamespace()
    +string get_verbositylevel()
    +boost::shared_ptr<ros::NodeHandle> get_nodehandle()
    +Logger *get_logger()
    +void update_ready_to_arm(eros::ready_to_arm v)
    +double measure_time_diff(ros::Time t_timer_a, ros::Time t_timer_b)
    +eros::resource convert(ResourceMonitor::ResourceInfo res_info)
    +void new_ppsmsg(const std_msgs::Bool::ConstPtr &t_msg)
    +bool firmware_service(eros::srv_firmware::Request &req, eros::srv_firmware::Response &res)
    +bool loggerlevel_service(eros::srv_logger_level::Request &req,
                             eros::srv_logger_level::Response &res)
    +bool diagnostics_service(eros::srv_get_diagnostics::Request &req,
                             eros::srv_get_diagnostics::Response &res)
    +void armedstate_Callback(const eros::armed_state::ConstPtr &t_msg)
    +void modestate_Callback(const eros::mode_state::ConstPtr &t_msg)
    +void base_reset()


    +{static} string validate_robotnamespace(string str)
    +{static} string get_hostname()
    +{static} eros::armed_state convert_fromptr(const eros::armed_state::ConstPtr &t_ptr)
    +{static} eros::mode_state convert_fromptr(const eros::mode_state::ConstPtr &t_ptr)
}
@enduml

PlantUML version 1.2022.8(Sun Sep 25 04:00:33 CDT 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>