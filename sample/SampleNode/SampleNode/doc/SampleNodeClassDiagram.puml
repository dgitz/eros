@startuml
title Sample Node Class Diagram

package eros {
  class BaseNode
  class BaseNodeProcess
}

package userPackage {
  BaseNode <|-- SampleNode
  BaseNodeProcess <|-- SampleNodeProcess
}
class SampleNode {
    +const std::string BASE_NODE_NAME
    +const uint16_t MAJOR_RELEASE_VERSION
    +const uint16_t MINOR_RELEASE_VERSION
    +const uint16_t BUILD_NUMBER
    +const std::string FIRMWARE_DESCRIPTION
    +const eros::System::MainSystem DIAGNOSTIC_SYSTEM
    +const eros::System::SubSystem DIAGNOSTIC_SUBSYSTEM
    +const eros::System::Component DIAGNOSTIC_COMPONENT
    +SampleNodeProcess* get_process()
    +bool start()
    +eros::Diagnostic::DiagnosticDefinition finish_initialization()
    +bool run_loop1()
    +bool run_loop2()
    +bool run_loop3()
    +bool run_001hz()
    +bool run_01hz()
    +bool run_01hz_noisy()
    +bool run_1hz()
    +bool run_10hz()
    +void thread_loop()
    +void cleanup()
    +bool changenodestate_service(eros::srv_change_nodestate::Request& req, eros::srv_change_nodestate::Response& res)
    +void system_commandAction_Callback(const eros::system_commandGoalConstPtr& goal)
    +void command_Callback(const eros::command::ConstPtr& t_msg)

    -SampleNodeProcess* process;
}
class SampleNodeProcess {
    +eros::Diagnostic::DiagnosticDefinition finish_initialization()
    +void reset()
    +eros::Diagnostic::DiagnosticDefinition update(double t_dt, double t_ros_time)
    +std::vector<eros::Diagnostic::DiagnosticDefinition> new_commandmsg(eros::command msg)
    +std::vector<eros::Diagnostic::DiagnosticDefinition> check_programvariables()
    +void cleanup()

}
SampleNode -> SampleNodeProcess
@enduml