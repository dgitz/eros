@startuml
title System Monitor Node Sequence Diagram
actor User as user
participant SystemMonitorNode as node
participant SystemMonitorProcess as process
participant Logger as logger

alt initialize
    activate node
    node -> node++: start()
    node -> node: initialize_diagnostic
    node -> process++: SystemMonitorProcess()
    node -> node: preinitialize_basenode()
    node -> process: enable_diagnostics()
    node -> process: finish_initialization()
    node -> node: finish_initialization()
    node -> node: init_screen()
    node -> node++: rescan_nodes()
    node -> process++: update_monitorlist()
    process --> node--: new_topics
    node--
    node -> process: request_statechange(RUNNING,override=true)
    node--
end

alt message_callback
    alt heartbeat_Callback(msg)
        node -> process++: new_heartbeatmessage(msg)
        process --> node--
    end
    alt resourceused_Callback(msg)
        node -> process++: new_resourceusedmessage(msg)
        process --> node--
    end
    alt resourceavailable_Callback(msg)
        node -> process++: new_resourceavailablemessage(msg)
        process --> node--
    end
    alt loadfactor_Callback(msg)
        node -> process++: new_loadfactormessage(msg)
        process --> node--
    end
    alt commandState_Callback(msg)
        node -> process++: new_commandstate(msg)
        process --> node--
    end

end

alt loops
    alt loop1
        node -> node++: run_loop1
        node--
    end
    alt loop2
        node -> node++: run_loop2
        node -> node++: rescan_nodes()
        node -> process++: update_monitorlist()
        process --> node--: new_topics
        node--
        node--
    end
    alt loop3
        node -> node++: run_loop3
        node--
    end
    alt run_001hz
        node -> node++: run_001hz
        node--
    end
    alt run_01hz
        node -> node++: run_001hz
        node--
    end
    alt run_01hz_noisy
        node -> process: pretty()
        process --> node: str
        node -> logger: log_debug(str)
    end
    alt run_1hz
        node -> process: get_latest_diagnostics()
        process --> node: latest_diagnostics
        node -> user: publish(latest_diagnostics)
    end
    alt run_10hz
        node -> process: update(0.1, now)
        process --> node: diag
        alt if diag.level >= NOTICE
            node -> logger: log_diagnostic(diag)
        end
        node -> process: get_diagnostics()
        process --> node: diagnostics
        node -> node: update_diagnostics(diagnostics)
        node -> process: get_ready_to_arm()
        process --> node: ready_to_arm
        node -> node: update_ready_to_arm(ready_to_arm)

    end
end
@enduml