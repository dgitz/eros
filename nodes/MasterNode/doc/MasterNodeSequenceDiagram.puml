@startuml
title Master Node Sequence Diagram
actor User as user
participant MasterNode as node
participant MasterNodeProcess as process
participant ResourceAvailableMonitor as resource_monitor

alt initialize
    activate node
    node -> node++: start()
    node -> node: initialize_diagnostic
    node -> process++: MasterNodeProcess()
    node -> node: preinitialize_basenode()
    node -> process: enable_diagnostics()
    node -> process: finish_initialization()
    node -> node++: finish_initialization()
    activate resource_monitor
    node -> resource_monitor: ResourceAvailableMonitor()
    node -> resource_monitor++: init()
    resource_monitor --> node--: diagnostics
    node -> process: request_statechange(RUNNING,override=true)
    node--
end

alt message_callback
    alt system_commandAction_Callback(msg)    
    end
    alt command_Callback(msg)
    end
end

alt loops
    alt loop1
        node -> node++: run_loop1
        node--
    end
    alt loop2
        node -> node++: run_loop2
        node--
    end
    alt loop3
        node -> node++: run_loop3
        node--
    end
    alt run_001hz
        node -> node++: run_001hz
        node--
    end
    alt run_01hz
        node -> node++: run_001hz
        node--
    end
    alt run_01hz_noisy
        node -> node++: pretty()
        node -> process++: pretty()
        process --> node--: str
        node --> node--: str
        node -> logger:log_debug(str)
        node -> resource_monitor++: update()
        resource_monitor --> node--: diagnostic
        node -> resource_monitor++: get_resourceinfo()
        resource_monitor --> node--: resource_info
        node -> user: publish(resource_info)
        node -> resource_monitor++: get_load_factor()
        resource_monitor --> node--: load_factor
        node -> user: publish(load_factor)

    end
    alt run_1hz
        node -> process: get_latest_diagnostics()
        process --> node: latest_diagnostics
        node -> user: publish(latest_diagnostics)
    end
    alt run_10hz
        node -> process: update(0.1, now)
        process --> node: diag
        alt if diag.level >= NOTICE
            node -> logger: log_diagnostic(diag)
        end
        node -> process: get_diagnostics()
        process --> node: diagnostics
        node -> node: update_diagnostics(diagnostics)
        node -> process: get_ready_to_arm()
        process --> node: ready_to_arm
        node -> node: update_ready_to_arm(ready_to_arm)

    end
end
@enduml